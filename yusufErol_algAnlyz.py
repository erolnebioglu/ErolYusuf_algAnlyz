import heapq

def matrices():
    adjacency_matrix =  [[0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0],
       [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0],
       [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0],
       [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0],
       [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0],
       [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0],
       [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0],
       [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0],
       [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0],
       [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0],
       [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,
        0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
        0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,
        0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1,
        0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1,
        1, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
        0, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0,
        0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1,
        0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0,
        1, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
        0, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        1, 0]]
     
    bandwidth_matrix = [[ 0, 10,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0],
       [10,  0,  7,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  7,  0,  5,  7,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  5,  0,  5,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  7,  5,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0],
       [ 4,  3,  0,  0,  0,  0, 10,  0,  3,  0,  8,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  4, 10,  0, 10,  0,  9,  9,  0,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  6,  0,  9,  0,  0,  9,  0,  0,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0,  3,  9,  0,  0,  9,  8, 10,  0,  0,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0,  0,  0,  9,  9,  0,  0,  0,  8,  4,  0,  0,
         0,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0,  8,  0,  0,  8,  0,  0,  8,  0,  0,  5,  0,
         0,  0,  9,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  8,  0,  7,  0,  0,  4,
         0,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  0,  7,  0, 10,  0,  0,
         8,  0,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  0, 10,  0,  0,  0,
         0,  3,  0,  0,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  0,  0,  0,  0,  9,
         0,  0,  0,  4,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  0,  9,  0,
         5,  0,  0,  0, 10, 10,  0,  0],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  0,  0,  5,
         0, 10,  0,  0,  0, 10,  3,  0],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,
        10,  0,  0,  0,  0,  0,  0,  5],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,
         0,  0,  0,  5,  0,  0,  0,  0],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,
         0,  0,  5,  0,  4,  0,  0,  0],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,
         0,  0,  0,  4,  0,  9,  0,  0],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,
        10,  0,  0,  0,  9,  0, 10,  0],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         3,  0,  0,  0,  0, 10,  0,  6],
       [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
         0,  5,  0,  0,  0,  0,  6,  0]]
    
    delay_matrix = [[0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0],
       [2, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0],
       [0, 4, 0, 3, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0],
       [0, 0, 3, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0],
       [0, 0, 2, 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0],
       [2, 1, 0, 0, 0, 0, 2, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0],
       [0, 0, 1, 4, 0, 2, 0, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0],
       [0, 0, 0, 0, 4, 0, 5, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0],
       [0, 0, 0, 0, 0, 1, 2, 0, 0, 2, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0],
       [0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0],
       [0, 0, 0, 0, 0, 4, 0, 0, 5, 0, 0, 2, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0,
        0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 0, 5, 0, 0, 3, 0, 0, 0, 0, 0, 0,
        0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 1, 0, 0, 5, 0, 0, 0, 0, 0,
        0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0,
        0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0,
        0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 5, 0, 0, 0, 2, 2,
        0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 5, 0, 1, 0, 0, 0, 3,
        1, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0,
        0, 2],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0,
        0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 1, 0,
        0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 5,
        0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 5, 0,
        4, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4,
        0, 2],
       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0,
        2, 0]]
    
    reliability_matrix = [[0.0  , 0.97, 0.0  , 0.0  , 0.0  , 0.98, 0.0  , 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  , 0.0  , 0.0 , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  ],
       [0.97, 0.0  , 0.96, 0.0  , 0.0  , 0.99, 0.0  , 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  ],
       [0.0  , 0.96, 0.0  , 0.98, 0.95, 0.0  , 0.97, 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  ],
       [0.0  , 0.0  , 0.98, 0.0  , 0.95, 0.0  , 0.98, 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  ],
       [0.0  , 0.0  , 0.95, 0.95, 0.0  , 0.0  , 0.0  , 0.95, 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  ],
       [0.98, 0.99, 0.0  , 0.0  , 0.0  , 0.0  , 0.96, 0.0 , 0.99, 0.0  , 0.98,
        0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  ],
       [0.0  , 0.0  , 0.97, 0.98, 0.0  , 0.96, 0.0  , 0.99, 0.96, 0.0  , 0.0 ,
        0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0 , 0.0  , 0.0  ,
        0.0  , 0.0  ],
       [0.0  , 0.0  , 0.0  , 0.0  , 0.95, 0.0  , 0.99, 0.0  , 0.0  , 0.96, 0.0  ,
        0.0  , 0.0  , 0.0  , 0.0 , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  ],
       [0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.99, 0.96, 0.0  , 0.0  , 0.97, 0.95,
        0.98, 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  ],
       [0.0  , 0.0  , 0.0  , 0.0  , 0.0 , 0.0  , 0.0  , 0.96, 0.97, 0.0  , 0.0  ,
        0.0  , 0.98, 0.95, 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  ],
       [0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.98, 0.0  , 0.0  , 0.95, 0.0  , 0.0  ,
        0.97, 0.0  , 0.0  , 0.97, 0.0  , 0.0  , 0.0  , 0.95, 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  ],
       [0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.98, 0.0  , 0.97,
        0.0  , 0.96, 0.0  , 0.0  , 0.99, 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  ],
       [0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.98, 0.0  ,
        0.96, 0.0  , 0.97, 0.0  , 0.0 , 0.96, 0.0  , 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  ],
       [0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.95, 0.0  ,
        0.0  , 0.97, 0.0  , 0.0  , 0.0  , 0.0  , 0.98, 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  ],
       [0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.97,
        0.0  , 0.0  , 0.0  , 0.0  , 0.96, 0.0  , 0.0  , 0.0  , 0.97, 0.0  , 0.0  ,
        0.0  , 0.0  ],
       [0.0  , 0.0 , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  ,
        0.99, 0.0  , 0.0  , 0.96, 0.0  , 0.98, 0.0  , 0.0  , 0.0  , 0.95, 0.98,
        0.0  , 0.0  ],
       [0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.96, 0.0  , 0.0  , 0.98, 0.0  , 0.98, 0.0  , 0.0  , 0.0  , 0.95,
        0.95, 0.0  ],
       [0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  , 0.98, 0.0  , 0.0  , 0.98, 0.0  , 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.96],
       [0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0 , 0.0  , 0.0  , 0.0 , 0.0  , 0.95,
        0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.96, 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  ],
       [0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  , 0.0  , 0.97, 0.0  , 0.0  , 0.0  , 0.96, 0.0  , 0.96, 0.0  ,
        0.0  , 0.0  ],
       [0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  , 0.0  , 0.0 , 0.95, 0.0  , 0.0  , 0.0  , 0.96, 0.0  , 0.96,
        0.0  , 0.0  ],
       [0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  , 0.0  , 0.0  , 0.98, 0.95, 0.0 , 0.0  , 0.0  , 0.96, 0.0  ,
        0.97, 0.0  ],
       [0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  ,
        0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.95, 0.0  , 0.0  , 0.0  , 0.0  , 0.97,
        0.0  , 0.95],
       [0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0 , 0.0  , 0.0 ,
        0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.0  , 0.96, 0.0  , 0.0  , 0.0  , 0.0  ,
        0.95, 0.0  ]]

    

    return adjacency_matrix, bandwidth_matrix, delay_matrix, reliability_matrix



def dijkstra_algorithm(graph, source, destination):
    n = len(graph)
    distances = [float('inf')] * n
    distances[source] = 0
    visited = set()

    while len(visited) < n:
        min_distance = float('inf')
        current_node = None

        for i in range(n):
            if i not in visited and distances[i] < min_distance:
                min_distance = distances[i]
                current_node = i

        if current_node is None:
            break

        visited.add(current_node)

        for neighbor, weight in enumerate(graph[current_node]):
            if weight > 0:  
                distance = distances[current_node] + weight
                if distance < distances[neighbor]:
                    distances[neighbor] = distance

    return distances[destination]


def bellman_ford_algorithm(graph, source, destination):
    n = len(graph)
    distances = [float('inf')] * n
    distances[source] = 0

    for _ in range(n - 1):
        for u in range(n):
            for v, weight in enumerate(graph[u]):
                if weight != 0:  
                    distance = distances[u] + weight
                    if distance < distances[v]:
                        distances[v] = distance

    
    for u in range(n):
        for v, weight in enumerate(graph[u]):
            if weight != 0:  
                if distances[u] + weight < distances[v]:
                    raise ValueError("Graph contains a negative weight cycle")

    return distances[destination]


def a_star_algorithm(graph, start, goal, heuristic):
    n = len(graph)
    open_set = [(0, start)]  
    g_scores = {node: float('inf') for node in range(n)}
    g_scores[start] = 0

    while open_set:
        current_cost, current_node = heapq.heappop(open_set)

        if current_node == goal:
            return g_scores[goal]

        for neighbor, weight in enumerate(graph[current_node]):
            if weight != 0:  
                tentative_g_score = g_scores[current_node] + weight
                if tentative_g_score < g_scores[neighbor]:
                    g_scores[neighbor] = tentative_g_score
                    f_score = tentative_g_score + heuristic(neighbor, goal)
                    heapq.heappush(open_set, (f_score, neighbor))

    return float('inf')  

def floyd_warshall_algorithm(graph):
    n = len(graph)
    
    distances = [row[:] for row in graph]

    for k in range(n):
        for i in range(n):
            for j in range(n):
                if distances[i][k] + distances[k][j] < distances[i][j]:
                    distances[i][j] = distances[i][k] + distances[k][j]

    return distances


def solution(adjacency_matrix, bandwidth_matrix, delay_matrix, reliability_matrix, request):
    source = request['source']
    destination = request['destination']
    bandwidth_requirement = request['bandwidth']

    
    if bandwidth_requirement > bandwidth_matrix[source][destination]:
        return None  

    
    shortest_path = dijkstra_algorithm(adjacency_matrix, source, destination)

    
    if shortest_path == float('inf') or delay_matrix[source][destination] > request['max_delay'] \
            or reliability_matrix[source][destination] < request['min_reliability']:
        return None  

    return shortest_path  



adjacency_matrix, bandwidth_matrix, delay_matrix, reliability_matrix = matrices()

print("Adjacency Matrix:")
print(adjacency_matrix)
print("\nBandwidth Matrix:")
print(bandwidth_matrix)
print("\nDelay Matrix:")
print(delay_matrix)
print("\nReliability Matrix:")
print(reliability_matrix)


try:
    shortest_path = dijkstra_algorithm(adjacency_matrix, 0, 23)
    print(f"Shortest path: {shortest_path}")
except ValueError as e:
    print(f"Error: {e}")


request = {'source': 0, 'destination': 1, 'bandwidth': 5, 'max_delay': 40, 'min_reliability': 0.8}
result = solution(adjacency_matrix, bandwidth_matrix, delay_matrix, reliability_matrix, request)
print(f"Solution for the request: {result}")

def display_output(path_nodes):
    print("Nodes in the calculated path:", path_nodes)